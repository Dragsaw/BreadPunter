<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AboutMe" xml:space="preserve">
    <value>About me</value>
  </data>
  <data name="Birthday" xml:space="preserve">
    <value>Birthday</value>
  </data>
  <data name="ButtonManagerRegister" xml:space="preserve">
    <value>Create manager account</value>
  </data>
  <data name="ButtonProgrammerRegister" xml:space="preserve">
    <value>Create programmer account</value>
  </data>
  <data name="ButtonSignIn" xml:space="preserve">
    <value>Sign In</value>
  </data>
  <data name="ButtonSignOut" xml:space="preserve">
    <value>Sign out</value>
  </data>
  <data name="ButtonSubmit" xml:space="preserve">
    <value>Submit</value>
  </data>
  <data name="DontHaveAccount" xml:space="preserve">
    <value>Don't have account yet? Sign up for free!</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>E-mail</value>
  </data>
  <data name="NotSpecified" xml:space="preserve">
    <value>Not specified</value>
  </data>
  <data name="NoWhiteSpaces" xml:space="preserve">
    <value>Password must not contain white spaces.</value>
  </data>
  <data name="PageRegister" xml:space="preserve">
    <value>Registration</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="PasswordMinimalLength" xml:space="preserve">
    <value>Password must be at least 5 chracters long.</value>
  </data>
  <data name="PasswordsDoNotMatch" xml:space="preserve">
    <value>Passwords do not match.</value>
  </data>
  <data name="Profile" xml:space="preserve">
    <value>Profile</value>
  </data>
  <data name="Register" xml:space="preserve">
    <value>Register</value>
  </data>
  <data name="RememberMe" xml:space="preserve">
    <value>Remember me</value>
  </data>
  <data name="RepeatPassword" xml:space="preserve">
    <value>Repeat password</value>
  </data>
  <data name="RequiredEmail" xml:space="preserve">
    <value>Email field is required.</value>
  </data>
  <data name="RequiredPassword" xml:space="preserve">
    <value>Password field is required.</value>
  </data>
  <data name="UserAlreadyExists" xml:space="preserve">
    <value>User with email {0} already exists.</value>
  </data>
  <data name="WrongEmailOrPassword" xml:space="preserve">
    <value>Wrong email or password.</value>
  </data>
  <data name="Skills" xml:space="preserve">
    <value>Skills</value>
  </data>
  <data name="ButtonCreateFilter" xml:space="preserve">
    <value>Create filter</value>
  </data>
  <data name="ButtonDelete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="ButtonEdit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="ButtonView" xml:space="preserve">
    <value>View</value>
  </data>
  <data name="FilterCreation" xml:space="preserve">
    <value>Filter creation</value>
  </data>
  <data name="LastViewed" xml:space="preserve">
    <value>Last viewed</value>
  </data>
  <data name="Never" xml:space="preserve">
    <value>never</value>
  </data>
  <data name="NoSkills" xml:space="preserve">
    <value>There's no skills to show.</value>
  </data>
  <data name="Advanced" xml:space="preserve">
    <value>Advanced</value>
  </data>
  <data name="Expert" xml:space="preserve">
    <value>Expert</value>
  </data>
  <data name="Intermediate" xml:space="preserve">
    <value>Intermediate</value>
  </data>
  <data name="NotRated" xml:space="preserve">
    <value>Not Rated</value>
  </data>
  <data name="Novice" xml:space="preserve">
    <value>Novice</value>
  </data>
  <data name="DateFormat" xml:space="preserve">
    <value>mm/dd/yyyy</value>
  </data>
  <data name="InvalidDate" xml:space="preserve">
    <value>Invalid date.</value>
  </data>
  <data name="BPDescription" xml:space="preserve">
    <value>Bread Puner is a professional network service for tough people working in the field of information technology. Here you will be able to find people with neccessary for you skills or to be found by people who will value your skills and knowledge.</value>
  </data>
  <data name="OrRegister" xml:space="preserve">
    <value>or register if you don't have an account.</value>
  </data>
  <data name="SignIn" xml:space="preserve">
    <value>Sign in</value>
  </data>
  <data name="Welcome" xml:space="preserve">
    <value>Welcome to Bread Punter!</value>
  </data>
  <data name="ButtonCancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="CreateSkill" xml:space="preserve">
    <value>Create skill</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="NotFound" xml:space="preserve">
    <value>Error: not found.</value>
  </data>
  <data name="ButtonCreateRole" xml:space="preserve">
    <value>Create role</value>
  </data>
  <data name="ButtonCreateUser" xml:space="preserve">
    <value>Create user</value>
  </data>
  <data name="Browse" xml:space="preserve">
    <value>Browse</value>
  </data>
  <data name="GoToProfile" xml:space="preserve">
    <value>Go to your profile and do things!</value>
  </data>
  <data name="InvalidCaptcha" xml:space="preserve">
    <value>Invalid captcha</value>
  </data>
  <data name="EnterCaptcha" xml:space="preserve">
    <value>Enter captcha</value>
  </data>
  <data name="Refresh" xml:space="preserve">
    <value>Refresh</value>
  </data>
  <data name="Action" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="ButtonSave" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Download" xml:space="preserve">
    <value>Download PDF</value>
  </data>
  <data name="EditInfo" xml:space="preserve">
    <value>Edit user information</value>
  </data>
  <data name="EditSkills" xml:space="preserve">
    <value>Edit user skills</value>
  </data>
  <data name="IncludeInReport" xml:space="preserve">
    <value>Include in report</value>
  </data>
  <data name="Photo" xml:space="preserve">
    <value>Photo</value>
  </data>
  <data name="Report" xml:space="preserve">
    <value>Report</value>
  </data>
  <data name="UserName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="UsersInReport" xml:space="preserve">
    <value>Users included in report</value>
  </data>
</root>